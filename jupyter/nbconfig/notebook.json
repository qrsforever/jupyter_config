{
  "load_extensions": {
    "plotlywidget/extension": true,
    "jupyter-js-widgets/extension": true,
    "nbextensions_configurator/config_menu/main": true,
    "contrib_nbextensions_help_item/main": true,
    "vim_binding/vim_binding": true,
    "execute_time/ExecuteTime": true,
    "snippets_menu/main": true,
    "table_beautifier/main": true,
    "skip-traceback/main": true,
    "toc2/main": true,
    "hide_input/main": true,
    "codefolding/main": false,
    "hide_input_all/main": true,
    "hide_header/main": true,
    "export_embedded/main": false,
    "splitcell/splitcell": true,
    "freeze/main": true,
    "latex_envs/latex_envs": false
  },
  "toc2": {
    "skip_h1_title": true,
    "toc_cell": false,
    "title_cell": "",
    "number_sections": true
  },
  "snippets": {
    "include_custom_menu": true,
    "custom_menu_content": "{\n    \"name\": \"ErlangAI\", \n    \"sub-menu\": [\n        {\n            \"name\": \"%CMD\", \n            \"snippet\": [\n                \"%reload_ext watermark\", \n                \"%reload_ext autoreload\", \n                \"%autoreload 2\", \n                \"%watermark -v -p numpy,sklearn,pandas\", \n                \"%watermark -v -p cv2,PIL,matplotlib\", \n                \"%watermark -v -p torch,torchvision,torchaudio,pytorch_lightning\", \n                \"%matplotlib inline\", \n                \"%config InlineBackend.figure_format='retina'\", \n                \"%config IPCompleter.use_jedi = False\", \n                \"\", \n                \"from IPython.display import display, HTML, Javascript\", \n                \"display(HTML('<style>.container { width:%d%% !important; }</style>' % 90))\", \n                \"\", \n                \"def _IMPORT_(x):\", \n                \"    try:\", \n                \"        exec(x, globals())\", \n                \"    except:\", \n                \"        pass\", \n                \"\"\n            ]\n        }, \n        {\n            \"name\": \"Common\", \n            \"snippet\": [\n                \"###\", \n                \"### Common ###\", \n                \"###\", \n                \"\",\n                \"import os, io, time, math, base64\", \n                \"\",\n                \"_IMPORT_('import numpy as np')\", \n                \"_IMPORT_('import pandas as pd')\", \n                \"_IMPORT_('from tqdm.notebook import tqdm')\", \n                \"\"\n            ]\n        }, \n        {\n            \"name\": \"Torch\", \n            \"snippet\": [\n                \"###\", \n                \"### Torch ###\", \n                \"###\", \n                \"\",\n                \"_IMPORT_('import torch')\", \n                \"_IMPORT_('import torch.nn as nn')\", \n                \"_IMPORT_('import torch.nn.functional as F')\", \n                \"_IMPORT_('import torch.optim as O')\", \n                \"_IMPORT_('from torchvision import models as M')\", \n                \"_IMPORT_('from torchvision import transforms as T')\", \n                \"_IMPORT_('from torch.utils.data import Dataset, DataLoader')\", \n                \"\"\n            ]\n        }, \n        {\n            \"name\": \"Viz\", \n            \"snippet\": [\n                \"###\", \n                \"### Viz Model ###\", \n                \"###\", \n                \"\",\n                \"_IMPORT_('import hiddenlayer as hl')\", \n                \"_IMPORT_('from graphviz import Digraph, Source')\", \n                \"_IMPORT_('from torchviz import make_dot')\", \n                \"_IMPORT_('from torchsummary import summary')\", \n                \"\"\n            ]\n        }, \n        {\n            \"name\": \"Display\", \n            \"snippet\": [\n                \"###\", \n                \"### Display ###\", \n                \"###\", \n                \"\",\n                \"_IMPORT_('import cv2')\", \n                \"_IMPORT_('from PIL import Image')\", \n                \"_IMPORT_('from torchvision.utils import make_grid')\", \n                \"_IMPORT_('import matplotlib.pyplot as plt')\", \n                \"_IMPORT_('import plotly.offline as py')\",\n                \"_IMPORT_('import plotly.graph_objs as go')\",\n                \"\", \n                \"\", \n                \"def show_video(video_path, width=None, height=None):\", \n                \"    W, H = '', ''\", \n                \"    if width:\", \n                \"        W = 'width=%d' % width\", \n                \"    if height:\", \n                \"        H = 'height=%d' % height\", \n                \"    mp4 = open(video_path, 'rb').read()\", \n                \"    data_url = 'data:video/mp4;base64,' + base64.b64encode(mp4).decode()\", \n                \"    return HTML('<video %s %s controls src=\\\"%s\\\" type=\\\"video/mp4\\\"/>' % (W, H, data_url))\", \n                \"\", \n                \"def show_image(image_path, width=None, height=None):\", \n                \"    W, H = '', ''\", \n                \"    if width:\", \n                \"        W = 'width=%d' % width\", \n                \"    if height:\", \n                \"        H = 'height=%d' % height\", \n                \"    img = open(image_path, 'rb').read()\", \n                \"    data_url = 'data:image/jpg;base64,' + base64.b64encode(img).decode()\", \n                \"    return HTML('<img %s %s src=\\\"%s\\\"/>' % (W, H, data_url))\", \n                \"\"\n            ]\n        }\n    ]\n}"
  },
  "Cell": {
    "cm_config": {
      "lineNumbers": true
    }
  },
  "Notebook": {
    "Header": false,
    "Toolbar": true
  },
  "Freeze": {
    "readonly_color": "#21d709",
    "frozen_color": "#9320df"
  }
}