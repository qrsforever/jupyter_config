{
  "load_extensions": {
    "plotlywidget/extension": true,
    "jupyter-js-widgets/extension": true,
    "nbextensions_configurator/config_menu/main": true,
    "contrib_nbextensions_help_item/main": true,
    "vim_binding/vim_binding": true,
    "execute_time/ExecuteTime": true,
    "snippets_menu/main": true,
    "table_beautifier/main": true,
    "skip-traceback/main": true,
    "toc2/main": true,
    "hide_input/main": true,
    "codefolding/main": true,
    "hide_input_all/main": true,
    "hide_header/main": true,
    "export_embedded/main": false,
    "splitcell/splitcell": true,
    "freeze/main": true,
    "latex_envs/latex_envs": false,
    "collapsible_headings/main": true,
    "code_prettify/autopep8": true,
    "notify/notify": false,
    "hinterland/hinterland": true
  },
  "toc2": {
    "skip_h1_title": true,
    "toc_cell": false,
    "title_cell": "",
    "number_sections": true
  },
  "snippets": {
    "include_custom_menu": true,
    "custom_menu_content": "{\n    \"name\": \"ErlangAI\", \n    \"sub-menu\": [\n        {\n            \"name\": \"%CMD\", \n            \"snippet\": [\n                \"%reload_ext watermark\", \n                \"%reload_ext autoreload\", \n                \"%autoreload 2\", \n                \"%watermark -v -p numpy,sklearn,pandas\", \n                \"%watermark -v -p cv2,PIL,matplotlib\", \n                \"%watermark -v -p torch,torchvision,torchaudio\", \n                \"%matplotlib inline\", \n                \"%config InlineBackend.figure_format='retina'\", \n                \"%config IPCompleter.use_jedi = False\", \n                \"\", \n                \"from IPython.display import display, Markdown, HTML, Javascript\", \n                \"display(HTML('<style>.container { width:%d%% !important; }</style>' % 80))\", \n                \"\", \n                \"def _IMPORT_(x):\", \n                \"    try:\", \n                \"        exec(x, globals())\", \n                \"    except:\", \n                \"        pass\", \n                \"\"\n            ]\n        }, \n        {\n            \"name\": \"Common\", \n            \"snippet\": [\n                \"###\", \n                \"### Common ###\", \n                \"###\", \n                \"\",\n                \"import sys, os, io, time, random, math\",\n                \"import json, base64, requests\",\n                \"import os.path as osp\",\n                \"\",\n                \"_IMPORT_('import numpy as np')\", \n                \"_IMPORT_('import pandas as pd')\", \n                \"_IMPORT_('from tqdm.notebook import tqdm')\", \n                \"\",\n                \"def print_progress_bar(x):\",\n                \"    print('\\\\r', end='')\",\n                \"    print('Progress: {}%:'.format(x), '%s%s' % ('\u258b'*(x//2), '.'*((100-x)//2)), end='')\",\n                \"    sys.stdout.flush()\",\n                \"\",\n                \"\"\n            ]\n        }, \n        {\n            \"name\": \"Torch\",\n            \"snippet\": [\n                \"\",\n                \"###\", \n                \"### Torch ###\", \n                \"###\", \n                \"\",\n                \"_IMPORT_('import torch')\", \n                \"_IMPORT_('import torch.nn as nn')\", \n                \"_IMPORT_('import torch.nn.functional as F')\", \n                \"_IMPORT_('import torch.optim as O')\", \n                \"_IMPORT_('from torchvision import models as M')\", \n                \"_IMPORT_('from torchvision import transforms as T')\", \n                \"_IMPORT_('from torch.utils.data import Dataset, DataLoader')\", \n                \"\"\n            ]\n        }, \n        {\n            \"name\": \"Viz-Model\", \n            \"snippet\": [\n                \"\",\n                \"###\", \n                \"### Viz Model ###\", \n                \"###\", \n                \"\",\n                \"_IMPORT_('import  wandb')\", \n                \"_IMPORT_('import hiddenlayer as hl')\", \n                \"_IMPORT_('from graphviz import Digraph, Source')\", \n                \"_IMPORT_('from torchviz import make_dot')\", \n                \"_IMPORT_('from torchsummary import summary')\", \n                \"\"\n            ]\n        }, \n        {\n            \"name\": \"Display\", \n            \"snippet\": [\n                \"\",\n                \"###\", \n                \"### Display ###\", \n                \"###\", \n                \"\",\n                \"_IMPORT_('import cv2')\", \n                \"_IMPORT_('from PIL import Image')\", \n                \"_IMPORT_('from torchvision.utils import make_grid')\", \n                \"_IMPORT_('import matplotlib.pyplot as plt')\", \n                \"_IMPORT_('import plotly')\", \n                \"_IMPORT_('import plotly.graph_objects as go')\",\n                \"_IMPORT_('import ipywidgets as widgets')\",\n                \"_IMPORT_('from ipywidgets import interact, interactive, fixed, interact_manual')\",\n                \"\", \n                \"# plotly.offline.init_notebook_mode(connected=False)\",\n                \"\", \n               \"plt.rcParams['figure.figsize'] = (12.0, 8.0)\",\n                \"\",\n                \"def show_table(headers, data, width=900):\",\n                \"    ncols = len(headers)\",\n                \"    width = int(width / ncols)\",\n                \"    lralign = []\",\n                \"    caption = []\",\n                \"    for item in headers:\",\n                \"        astr = ''\",\n                \"        if item[0] == ':':\",\n                \"            astr = ':'\",\n                \"            item = item[1:]\",\n                \"        astr += '---'\",\n                \"        if item[-1] == ':':\",\n                \"            astr += ':'\",\n                \"            item = item[:-1]\",\n                \"        lralign.append(astr)\",\n                \"        caption.append(item)\",\n                \"    captionstr = '|'.join(caption) + chr(10)\",\n                \"    lralignstr = '|'.join(lralign) + chr(10)\",\n                \"    imgholdstr = '|'.join(['<img width=%d/>' % width] * ncols) + chr(10)\",\n                \"    table = captionstr + lralignstr + imgholdstr\",\n                \"    is_dict = isinstance(data[0], dict)\",\n                \"    for row in data:\",\n                \"        if is_dict:\",\n                \"            table += '|'.join([f'{row[c]}' for c in caption]) + chr(10)\",\n                \"        else:\",\n                \"            table += '|'.join([f'{col}' for col in row]) + chr(10)\",\n                \"    return Markdown(table)\",\n                \"\",\n                \"def show_video(vidsrc, width=None, height=None):\",\n                \"    W, H = '', ''\",\n                \"    if width:\",\n                \"        W = 'width=%d' % width\",\n                \"    if height:\",\n                \"        H = 'height=%d' % height\",\n                \"    if vidsrc.startswith('http'):\",\n                \"        data_url = vidsrc\",\n                \"    else:\",\n                \"        mp4 = open(vidsrc, 'rb').read()\",\n                \"        data_url = 'data:video/mp4;base64,' + base64.b64encode(mp4).decode()\",\n                \"    return HTML('<video %s %s controls src=\\\"%s\\\" type=\\\"video/mp4\\\"/>' % (W, H, data_url))\",\n                \"\",\n                \"def show_image(imgsrc, width=None, height=None):\",\n                \"    if isinstance(imgsrc, np.ndarray):\",\n                \"        img = imgsrc\",\n                \"        if width or height:\",\n                \"            if width and height:\",\n                \"                size = (width, height)\",\n                \"            else:\",\n                \"                rate = img.shape[1] / img.shape[0]\",\n                \"                if width:\",\n                \"                    size = (width, int(width/rate))\",\n                \"                else:\",\n                \"                    size = (int(height*rate), height)\",\n                \"            img = cv2.resize(img, size)\",\n                \"            plt.figure(figsize=(3*int(size[0]/80+1), 3*int(size[1]/80+1)), dpi=80)\",\n                \"        plt.axis('off')\",\n                \"        if len(img.shape) > 2:\",\n                \"            plt.imshow(img);\",\n                \"        else:\",\n                \"            plt.imshow(img, cmap='gray');\",\n                \"        return\",\n                \"\",\n                \"    W, H = '', ''\",\n                \"    if width:\",\n                \"        W = 'width=%d' % width\",\n                \"    if height:\",\n                \"        H = 'height=%d' % height\",\n                \"    if imgsrc.startswith('http'):\",\n                \"        data_url = imgsrc\",\n                \"    else:\",\n                \"        if len(imgsrc) > 2048:\",\n                \"            data_url = 'data:image/jpg;base64,' + imgsrc\",\n                \"        else:\",\n                \"            img = open(imgsrc, 'rb').read()\",\n                \"            data_url = 'data:image/jpg;base64,' + base64.b64encode(img).decode()\",\n                \"    return HTML('<img %s %s src=\\\"%s\\\"/>' % (W, H, data_url))\",  \n                \"\",\n                \"    W, H = '', ''\", \n                \"    if width:\", \n                \"        W = 'width=%d' % width\", \n                \"    if height:\", \n                \"        H = 'height=%d' % height\", \n                \"    if image_path.startswith('http'):\",\n                \"        data_url = image_path\",\n                \"    else:\",\n                \"        img = open(image_path, 'rb').read()\", \n                \"        data_url = 'data:image/jpg;base64,' + base64.b64encode(img).decode()\", \n                \"    return HTML('<img %s %s src=\\\"%s\\\"/>' % (W, H, data_url))\", \n                \"\",\n                \"def im_read(url, rgb=True, size=None):\",\n                \"    response = requests.get(url)\",\n                \"    if response:\",\n                \"        imgmat = np.frombuffer(response.content, dtype=np.uint8)\",\n                \"        img = cv2.imdecode(imgmat, cv2.IMREAD_COLOR)\",\n                \"        if rgb:\",\n                \"            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\",\n                \"        if size:\",\n                \"           if isinstance(size, int):\",\n                \"               size = (size, size)\",\n                \"           img = cv2.resize(img, size, interpolation=cv2.INTER_AREA)\",\n                \"        return img\",\n                \"    return None\",\n                \"\"\n            ]\n        },\n        {\n            \"name\": \"Random\", \n            \"snippet\": [\n                \"\",\n                \"###\", \n                \"### Random Seed ###\", \n                \"###\", \n                \"\",\n                \"def  set_rng_seed(x):\", \n                \"    try:\", \n                \"        random.seed(x)\", \n                \"        np.random.seed(x)\", \n                \"        torch.manual_seed(x)\", \n                \"    except: \", \n                \"        pass\", \n                \"\", \n                \"set_rng_seed(888)\",\n                \"\"\n            ]\n        }\n    ]\n}"
  },
  "Cell": {
    "cm_config": {
      "lineNumbers": true
    }
  },
  "Notebook": {
    "Header": false,
    "Toolbar": true
  },
  "Freeze": {
    "readonly_color": "#21d709",
    "frozen_color": "#9320df"
  },
  "notify": {
    "sticky": false
  }
}